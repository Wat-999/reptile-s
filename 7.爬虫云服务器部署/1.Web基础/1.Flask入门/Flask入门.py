from flask import Flask
app = Flask(__name__) #注意name前后各为两条下划线
#创建一个web应用的flask的实例  这两行为固定代码

#定义路由函数
@app.route('/')  #定义路由规则。路由规则就是网址的后缀，这里定义为'/'，
#那么访问网址http://127.0.0.1:5000/就能看到本地搭建的网页(其实也可以直接访问http://127.0.0.1:5000).
#如果将这行代码改为@app.route('/hello')，那么访问网址时就必须添加后缀'/hello'，即需要访问http://127.0.0.1:5000/hello才能看到本地搭建
def index():
    return '<h1>Hello 华小智!</h1>'
#第9、10行用于定义访问上面设置的路由后看到的网页内容。idex()函数中是网页的HTML代码，作为简单演示，这里只用了<h1>标签定义了一个大标题"Hello World"
#index()函数只是个代号，可以修改成其他名称

#运行项目
app.run(port=8080, debug=True)  #用run()函数启动web服务器，会输出一个网址http://127.0.0.1:5000/，该网址是一个本地网址，只有自己的计算机可以访问
#如果想创建一个所有人都能访问的网址，则需要在云服务器上部署
#网址中的127.0.0.1代表localhost(本地主机)，5000代表计算机的端口。所谓端口可以类比usb插口理解为计算机中的虚拟插口。
#计算机的ip地址通常有限，但是端口很多，因此可以分配不同的端口干不同的事。5000是flask的默认端口，也可以自定义设置

#补充知识点： app.run()中的参数设置
#在app.run()中可以设置参数，主要设置端口参数port、调试参数debug、ip地址参数host
#端口参数port
#如果不想使用默认的5000端口，可以通过设置port参数来指定端口，即app.run(port=8080) 输出网址就变成http://127.0.0.1:8080
#如果把port参数改成80，输出的网址是http://127.0.0.1:80，可以看到地址栏中显示的网址只有ip地址，没有端口
#这是因为80端口是为http开放的默认端口，所以即使在地址阆中输入网址时添加来80端口，浏览器也会将其省略，(将代码部署到服务器时就是使用的80端口)
#在本地调试项目时，如果想同时运行多个项目，最好不同项目使用不同端口，否则可能会产生冲突。或者先关闭不调试的项目，然后运行要调试的项目

#调试参数debug
#通常我们不能一步到位把所有代码都编写完毕，因此需要进行代码调试。如果按之前的方法编写代码，那么每次修改代码后，都得重新启动项目才能更新修改的内容，这样就不太方便调试项目
#为方便于边修改代码边更新项目，可以在run()函数中传入debug参数，并将其设置为true(默认值为false)，以启用debug模式(即调试模式)
#举例来说，将debug参数设置为true后，如果把之前index()函数中的"Hello World1213!"改为"Hello 华小智"，然后在浏览器中刷新网页，就会看到
#网页上的Hello World1213!变成Hello 华小智，而如果不设置惨谁debug，刷新网页时不会更新内容
#需要注意的是，将debug参数设置true后，会自动更新的主要是前端嗲吗，如果后端代码(python文件中的代码)发生来改变，那么建议还是重新启动项目

#3ip地址参数host
#通常默认的ip地址是本机地址127.0.0.1，在进行本机调试时用这个默认值完全足够。如果想在服务器上部署，则需要将ip地址参数host设置为0.0.0.0，
#然后将端口参数port设置为80，这样其他人才能通过服务器的公网ip地址或ip地址对应的域名直接访问网站
#总体来说，在本地编写flask项目时只需要激活debug参数，以方便调试代码，而将项目真正部署到服务器时，则需要设置host参数和port参数

#补充知识点2："if __name__ == '__main__':"在flask项目中的作用
# if __name__ == '__main__':
#     app.run()
#一个python文件有两种使用方法：一种是直接执行；另一种是通过import语句导入到其他python文件中执行，例如，import ruquests其实是调用的就是
#python文件"requests.py文件"。"if __name__ == '__main__':"的作用就是控制在这两种情况下执行代码的过程。
#在这行代码下的代码只用在第一种情况下才会被执行，在第二种情况下则不会被执行。这是因为每个python文件其实都有一个内置名字_main_,而_name_是每一个
#python文件的内置属性。感兴趣的读者可以在python文件中输入print(_name_)后运行，会发现打印输出结果就是_main_
#因此，加上"if __name__ == '__main__':"后，如果是直接运行该oython文件，就会执行app.run()，如果是在其他python文件中通过import语句导入该python文件
#就不会执行app.run()，其目的主要是防止在引用时执行不必要的代码
#本书的Flask项目不会在其他文件内引用该python文件，可直接写app.run()。不过为来符合flask编程的主流习惯，在正式项目中建议尽量加上"if __name__ == '__main__':"
